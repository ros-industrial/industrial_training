<launch>

<!-- WARNING THIS LAUNCH FILE IS DEPRECATED, USE THE APPROPRIATE
"robot_interface_streaming_<controller>.launch" file or "robot_interface_streaming.launch"
instead.-->

<!-- This launch file provides a socket-based connection to the Motoman controllers
using the standard ROS Industrial simple_message protocol.

Several nodes are started, to supply both low-level robot communication
and higher-level actionlib support:
- robot_state : publishes current joint positions and robot state data
- motion_download_interface : command robot motion by sending motion points to robot
- joint_trajectory_action : actionlib interface to control robot motion

Usage:
robot_interface.launch robot_ip:=<value> controller:=<value>
-->

<!-- robot_ip: IP-address of the robot's socket-messaging server -->
<arg name="robot_ip" />

<!-- copy the specified arguments to the Parameter Server, for use by nodes below -->
<param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>

<!-- robot_state: publishes joint positions and robot-state data
(from socket connection to robot) -->
<node pkg="motoman_driver" type="$(controller)_robot_state" name="robot_state" output="screen"/>

<!-- motion_streaming_interface: sends robot motion commands by STREAMING path to robot
                                 (using socket connection to robot) -->
<node pkg="motoman_driver" type="$(controller)_motion_streaming_interface" name="motion_streaming_interface" output="screen"/>

<!-- joint_trajectory_action: provides actionlib interface for high-level robot control -->
<node pkg="industrial_robot_client" type="joint_trajectory_action" name="joint_trajectory_action"/>

</launch>
